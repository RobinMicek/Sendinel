name: Build and Push Docker Images on Release

on:
  release:
    types: [published]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      RELEASE_TAG: ${{ github.event.release.tag_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install yq
        run: sudo apt-get update && sudo apt-get install -y yq

      - name: Build and push Docker images
        run: |
          set -e

          # Fallback to 'latest' if RELEASE_TAG is empty
          if [ -z "$RELEASE_TAG" ]; then
            RELEASE_TAG="latest"
          fi

          # Force lowercase for owner and repo
          OWNER_LOWER=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')
          REPO_LOWER=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')

          echo "Repository: $OWNER_LOWER/$REPO_LOWER"
          echo "Release tag: $RELEASE_TAG"

          # Find all services with a build section in docker-compose.yaml
          SERVICES=$(yq -r '.services | to_entries[] | select(.value.build) | .key' docker-compose.yaml)

          if [ -z "$SERVICES" ]; then
            echo "No buildable services found. Exiting."
            exit 0
          fi

          echo "Found buildable services:"
          echo "$SERVICES"

          # Ensure .env exists for docker builds
          touch .env

          for SERVICE in $SERVICES; do
            SERVICE_LOWER=$(echo "$SERVICE" | tr '[:upper:]' '[:lower:]')
            BUILD_CONTEXT=$(yq -r ".services[\"$SERVICE\"].build.context" docker-compose.yaml)
            DOCKERFILE=$(yq -r ".services[\"$SERVICE\"].build.dockerfile" docker-compose.yaml)

            if [ -z "$BUILD_CONTEXT" ] || [ "$BUILD_CONTEXT" = "null" ]; then
              echo "Skipping service $SERVICE_LOWER: no build context"
              continue
            fi

            if [ -z "$DOCKERFILE" ] || [ "$DOCKERFILE" = "null" ]; then
              DOCKERFILE="Dockerfile"
            fi

            IMAGE="ghcr.io/${OWNER_LOWER}/${REPO_LOWER}-${SERVICE_LOWER}:${RELEASE_TAG}"
            IMAGE_LATEST="ghcr.io/${OWNER_LOWER}/${REPO_LOWER}-${SERVICE_LOWER}:latest"

            echo "Building service: $SERVICE_LOWER"
            docker build -f "$BUILD_CONTEXT/$DOCKERFILE" -t "$IMAGE" "$BUILD_CONTEXT"

            echo "Tagging $IMAGE as $IMAGE_LATEST"
            docker tag "$IMAGE" "$IMAGE_LATEST"

            echo "Pushing $IMAGE and $IMAGE_LATEST"
            docker push "$IMAGE"
            docker push "$IMAGE_LATEST"
          done
